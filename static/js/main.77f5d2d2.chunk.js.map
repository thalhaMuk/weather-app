{"version":3,"sources":["utils/Utils.js","utils/Cloud.png","Card.js","Dashboard.js","App.js","index.js"],"names":["API_KEY","process","cityId","i","data","List","length","push","CityCode","Card","city","useState","weatherData","setWeatherData","randomColor","Math","random","toString","a","fetch","then","res","json","result","console","log","useEffect","fetchData","key","value","ttl","now","Date","item","expiry","getTime","localStorage","setItem","JSON","stringify","setWithExpiry","main","weather","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","Container","style","backgroundColor","TopContainer","Image","src","cloud","TopLeftContainer","Heading","name","TinyText","dt","toLocaleTimeString","TopRightContainer","BigText","temp","temp_min","temp_max","BottomContainer","BottomLeftContainer","pressure","humidity","visibility","Divider","varient","height","orientation","BottomMiddleContainer","icon","faPaperPlane","wind","speed","deg","BottomRightContainer","sys","sunrise","sunset","styled","div","img","h3","citiesArr","Dashboard","textInput","setTextInput","Header","faCloudSun","InputContainer","TextField","onChange","event","target","id","label","variant","colo","size","Button","onClick","e","color","Grid","container","direction","justifyContent","alignItems","xs","spacing","cities","unique","forEach","Object","keys","removeDups","map","h2","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77f5d2d2.chunk.js","sourcesContent":["import data from \"./cities.json\";\r\n\r\nexport const API_KEY =  process.env.REACT_APP_OPEN_WEATHER_API_KEY;\r\n\r\nlet cityId = [];\r\n\r\nfor(var i = 0; i < data.List.length ; i++) {\r\n  cityId.push(data.List[i].CityCode);  \r\n}   \r\n\r\nexport const getApiURL = `https://api.openweathermap.org/data/2.5/group?id=${cityId}&appid=${API_KEY}&units=metric`;\r\n","export default __webpack_public_path__ + \"static/media/Cloud.9d53d167.png\";","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { API_KEY } from \"./utils/Utils.js\";\r\nimport cloud from \"./utils/Cloud.png\";\r\n\r\nimport {\r\n  faCloud,\r\n  faBolt,\r\n  faCloudRain,\r\n  faCloudShowersHeavy,\r\n  faSnowflake,\r\n  faSun,\r\n  faSmog,\r\n  faPaperPlane,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"@fontsource/roboto\";\r\n\r\nimport { Divider } from \"@material-ui/core\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nfunction Card({ city }) {\r\n  const [weatherData, setWeatherData] = useState([]);\r\n  const randomColor = \"#\" + (((1 << 24) * Math.random()) | 0).toString(16);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    console.log(weatherData);\r\n    setWithExpiry(\"weatherData\", weatherData, 50000);\r\n  }, []);\r\n\r\n  function setWithExpiry(key, value, ttl) {\r\n    const now = new Date();\r\n    const item = {\r\n      value: value,\r\n      expiry: now.getTime() + ttl,\r\n    };\r\n    localStorage.setItem(key, JSON.stringify(item));\r\n  }\r\n\r\n  function setWithExpiry(key, value, ttl) {\r\n    const now = new Date();\r\n    const item = {\r\n      value: value,\r\n      expiry: now.getTime() + ttl,\r\n    };\r\n    localStorage.setItem(key, JSON.stringify(item));\r\n  }\r\n\r\n  async function fetchData() {\r\n    await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setWeatherData(result);\r\n        console.log(weatherData);\r\n      });\r\n  }\r\n\r\n  let weatherIcon = null;\r\n  if (typeof weatherData.main != \"undefined\") {\r\n    if (weatherData.weather[0].main === \"Thunderstorm\") {\r\n      weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n    } else if (weatherData.weather[0].main === \"Drizzle\") {\r\n      weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n    } else if (weatherData.weather[0].main === \"Rain\") {\r\n      weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n    } else if (weatherData.weather[0].main === \"Snow\") {\r\n      weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n    } else if (weatherData.weather[0].main === \"Clear\") {\r\n      weatherIcon = <FontAwesomeIcon icon={faSun} />;\r\n    } else if (weatherData.weather[0].main === \"Clouds\") {\r\n      weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n    } else {\r\n      weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {typeof weatherData.main != \"undefined\" ? (\r\n        <Container style={{ backgroundColor: randomColor }}>\r\n          <TopContainer>\r\n            <Image src={cloud} />\r\n            <TopLeftContainer>\r\n              <Heading>{weatherData.name}</Heading>\r\n              <TinyText>\r\n                {new Date(weatherData.dt * 1000).toLocaleTimeString(\"en-IN\")}\r\n              </TinyText>\r\n            </TopLeftContainer>\r\n\r\n            <TopRightContainer>\r\n              <BigText>{weatherData.main.temp} &deg;C</BigText>\r\n              <TinyText>\r\n                Temp Min: {weatherData.main.temp_min} &deg;C\r\n                <br />\r\n                Temp Max: {weatherData.main.temp_max} &deg;C\r\n              </TinyText>\r\n            </TopRightContainer>\r\n          </TopContainer>\r\n\r\n          <BottomContainer>\r\n            <BottomLeftContainer>\r\n              <TinyText>\r\n                Pressure: {weatherData.main.pressure}hPa <br />\r\n                Humidity: {weatherData.main.humidity} &deg;C <br />\r\n                Visibility: {weatherData.visibility} %\r\n              </TinyText>\r\n            </BottomLeftContainer>\r\n            <Divider\r\n              varient=\"middle\"\r\n              style={{ height: \"80%\" }}\r\n              orientation=\"vertical\"\r\n            />\r\n            <BottomMiddleContainer>\r\n              <TinyText>\r\n                <FontAwesomeIcon icon={faPaperPlane} /> {\"\\n\"}\r\n                {weatherData.wind.speed} m/s {weatherData.wind.deg} Degree\r\n              </TinyText>\r\n            </BottomMiddleContainer>\r\n            <Divider\r\n              varient=\"middle\"\r\n              style={{ height: \"80%\" }}\r\n              orientation=\"vertical\"\r\n            />\r\n            <BottomRightContainer>\r\n              <TinyText>\r\n                Sunrise:{\" \"}\r\n                {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString(\r\n                  \"en-IN\"\r\n                )}{\" \"}\r\n                <br />\r\n                Sunset:\r\n                {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString(\r\n                  \"en-IN\"\r\n                )}\r\n              </TinyText>\r\n            </BottomRightContainer>\r\n          </BottomContainer>\r\n        </Container>\r\n      ) : (\r\n        <Container></Container>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n\r\nconst Container = styled.div`\r\n  width: 500px;\r\n  height: 300px;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-family: \"Roboto\";\r\n  margin: 30px;\r\n  @media (max-width: 768px) {\r\n    width: 420px;\r\n    height: 280px;\r\n  }\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 18%;\r\n  height: auto;\r\n  position: absolute;\r\n  opacity: 0.5;\r\n`;\r\n\r\nconst TopContainer = styled.div`\r\n  width: 100%;\r\n  height: 60%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst BottomContainer = styled.div`\r\n  width: 100%;\r\n  height: 40%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  background-color: #383b47;\r\n`;\r\n\r\nconst TopLeftContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst TopRightContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst BottomLeftContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst BottomMiddleContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst BottomRightContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst Heading = styled.h3`\r\n  font-size: 28px;\r\n`;\r\n\r\nconst TinyText = styled.h3`\r\n  font-size: 14px;\r\n`;\r\nconst BigText = styled.h3`\r\n  font-size: 40px;\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Card from \"./Card.js\";\r\n\r\nimport { Grid, TextField } from \"@material-ui/core\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport { faCloudSun } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nlet citiesArr = [];\r\n\r\nfunction Dashboard() {\r\n  const [textInput, setTextInput] = useState(\"\");\r\n\r\n  function removeDups(cities) {\r\n    let unique = {};\r\n    cities.forEach(function (i) {\r\n      if (!unique[i]) {\r\n        unique[i] = true;\r\n      }\r\n    });\r\n    return Object.keys(unique);\r\n  }\r\n\r\n  function handleClick(e) {\r\n    setTextInput(\"\");\r\n    citiesArr.push(textInput);\r\n  }\r\n\r\n  function handleChange(event) {\r\n    setTextInput(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <FontAwesomeIcon icon={faCloudSun} /> <span />\r\n        <span />\r\n        Weather App\r\n      </Header>\r\n\r\n      <InputContainer>\r\n        <TextField\r\n          onChange={handleChange}\r\n          id=\"filled-basic\"\r\n          label=\"Enter a city\"\r\n          variant=\"filled\"\r\n          style={{ backgroundColor: \"white\", colo: \"gray\" }}\r\n          size=\"small\"\r\n        />\r\n\r\n        <Button onClick={handleClick} variant=\"contained\" color=\"primary\">\r\n          Add City\r\n        </Button>\r\n      </InputContainer>\r\n\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        xs={6}\r\n        spacing={3}\r\n      >\r\n        <Grid item>\r\n          {removeDups(citiesArr).map((city) => (\r\n            <Card key={city} city={city} />\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  justify-content: space-around;\r\n  display: grid;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n  width: 500px;\r\n\r\n  margin-top: 3rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Header = styled.h2`\r\n  font-size: 35px;\r\n  width: 100%;\r\n  text-align: center;\r\n`;\r\n","import Dashboard from \"./Dashboard.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}